define(["exports"],function(e){"use strict";class t{constructor(){if(this._resolveFunc=null,this._rejectFunc=null,this._initialized=!1,this._listener=null,this._messageId=0,this._id="",this._token="",t._created)throw"Only one instance allowed";t._created=!0}parseQuery(e){const t={},o=("?"===e[0]?e.substr(1):e).split("&");for(var n=0;n<o.length;n++){let e=o[n].split("=");t[decodeURIComponent(e[0])]=decodeURIComponent(e[1]||"")}return t}init(e){if(this._initialized)throw"Already initialized";if(void 0===e)throw"io() required";if(this._socket=e.io?e.io:e,e.token)this._token=e.token;else{const e=window.location.search.substring(1),t=this.parseQuery(e);this._token=t.token}if(!this._token)throw"Missing token";return"string"==typeof e.rooms&&(e.rooms=[e.rooms]),this._rooms=e.rooms?e.rooms:void 0,this._initialized=!0,this._socket.on("connect",()=>this._onConnect()),this._socket.on("reconnect",e=>this._onReconnect(e)),this._socket.on("disconnect",e=>this._onDisconnect(e)),this._socket.on("connect_timeout",e=>this._onConnectTimeout(e)),this._socket.on("connect_error",e=>this._onConnectError(e)),this._socket.on("participants",e=>this._onParticipants(e)),this._socket.on("join",e=>this._onJoin(e)),this._socket.on("leave",e=>this._onLeave(e)),this._socket.on("message",e=>this._onMessage(e)),this._socket.on("authResult",e=>this._onAuthResult(e)),this._socket.on("reconnecting",e=>this._onReconnecting(e)),this._socket.on("reconnect_error",e=>this._onReconnectError(e)),this._socket.on("reconnect_failed",e=>this._onReconnectFailed(e)),this._socket.on("ping",()=>this._onPing()),this._socket.on("pong",e=>this._onPong(e)),this._socket.connect("/"),this._makePromise()}_onConnect(){console.log("_onConnect()");const e={token:this._token};this._rooms&&(e.rooms=this._rooms),this._send("authToken",e)}_onReconnect(e){console.log("_onReconnect() attemptNumber="+e),this._listener&&this._listener(!1,{event:"reconnect",attemptNumber:e,err:!1})}_onDisconnect(e){console.log("_onDisconnect() reason="+e),this._listener&&this._listener(!1,{event:"disconnect",reason:e,err:!1})}_onConnectTimeout(e){console.log("_onConnectTimeout() timeout="+e),this._listener&&this._listener(!1,{event:"connectTimeout",timeout:e,err:!1})}_onConnectError(e){console.log("_onConnectError() error="+e),this._rejectFunc&&this._rejectFunc(e),this._listener&&this._listener(!0,{event:"connectError",error:e,err:!0})}_onParticipants(e){console.log("_onParticipants()"),console.log(e)}_onJoin(e){console.log("_onJoin()"),console.log(e)}_onLeave(e){console.log("_onLeave()"),console.log(e)}_onMessage(e){console.log("_onMessage()"),console.log(e),this._listener&&(e.err=!1,e.event="message",this._listener(!1,e))}_onAuthResult(e){console.log("_onAuthResult()"),console.log(e),e.err?this._rejectFunc&&this._rejectFunc(e):(this._id=e.clientId,e.token&&(this._token=e.token),this._resolveFunc&&this._resolveFunc(this))}_onReconnecting(e){console.log("_onReconnecting() attemptNumber="+e),this._listener&&this._listener(!1,{event:"reconnecting",attemptNumber:e,err:!1})}_onReconnectError(e){console.log("_onReconnectError() error="+e),this._listener&&this._listener(!0,{event:"reconnectErro",err:e})}_onReconnectFailed(e){console.log("_onReconnectFailed() error="+e),this._listener&&this._listener(!1,{event:"reconenctFailed",err:e})}_onPing(){}_onPong(e){console.log("_onPong() latencyMs="+e),this._latency=e}_clearCallback(){this._resolveFunc=null,this._rejectFunc=null}_resolve(e){let t=this._resolveFunc;this._clearCallback(),null!==t&&t(e)}_reject(e){let t=this._rejectFunc;this._clearCallback(),null!==t&&t(e)}join(e){if(!e)throw"Room name or array of room names required";return"string"==typeof e&&(e=[e]),this._rooms=e,this._makePromise()}leave(e){if(!e)throw"Room ID or array of room IDs required";return"string"==typeof e&&(e=[e]),this._makePromise()}participants(e){return this._makePromise()}rooms(e){return this._makePromise()}_send(e,t){this._messageId=this._messageId+1,t.id=this._messageId,this._socket.emit(e,t)}send(e,t){if(void 0===e)throw"Message required";if(void 0===t&&(t=this._rooms),"string"==typeof t&&(t=[t]),!Array.isArray(t))throw"Rooms array required";const o={message:e,rooms:t};this._send("message",o)}id(){return this._id}token(e){let t=this._token;return e&&(this._token=e),t}latency(){return this._latency}disconnected(){return this._socket._disconnected}_makePromise(){return new Promise((e,t)=>{this._resolveFunc=e,this._rejectFunc=t})}disconnect(){this._socket.disconnect()}setEventListener(e){if(!(e instanceof Function))throw"Function required";this._listener=e}}t._created=!1,e.Messaging=t,e.createMessaging=async function(e){if("object"!=typeof e)throw"io() required";e.io||(e={io:e});const o=new t;return e.eventListener&&o.setEventListener(e.eventListener),await o.init(e),o},Object.defineProperty(e,"__esModule",{value:!0})});