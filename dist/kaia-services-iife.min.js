var kaiaJsServices=function(e){"use strict";class t{constructor(){if(this._promises={},this._initialized=!1,this._listener=null,this._messageId=0,this._id=void 0,this._token="",t._created)throw"Only one instance allowed";t._created=!0}parseQuery(e){const t={},o=("?"===e[0]?e.substr(1):e).split("&");for(var s=0;s<o.length;s++){let e=o[s].split("=");t[decodeURIComponent(e[0])]=decodeURIComponent(e[1]||"")}return t}init(e){if(this._initialized)throw"Already initialized";if(void 0===e)throw"io() required";if(this._socket=e.io?e.io:e,e.token)this._token=e.token;else{const e=window.location.search.substring(1),t=this.parseQuery(e);this._token=t.token}if(!this._token)throw"Missing token";return"string"==typeof e.rooms&&(e.rooms=[e.rooms]),this._rooms=e.rooms?e.rooms:void 0,this._initialized=!0,this._socket.on("connect",()=>this._onConnect()),this._socket.on("reconnect",e=>this._onReconnect(e)),this._socket.on("disconnect",e=>this._onDisconnect(e)),this._socket.on("connect_timeout",e=>this._onConnectTimeout(e)),this._socket.on("connect_error",e=>this._onConnectError(e)),this._socket.on("participants",e=>this._onParticipants(e)),this._socket.on("rooms",e=>this._onRooms(e)),this._socket.on("joined",e=>this._onJoined(e)),this._socket.on("left",e=>this._onLeft(e)),this._socket.on("message",e=>this._onMessage(e)),this._socket.on("authResult",e=>this._onAuthResult(e)),this._socket.on("reconnecting",e=>this._onReconnecting(e)),this._socket.on("reconnect_error",e=>this._onReconnectError(e)),this._socket.on("reconnect_failed",e=>this._onReconnectFailed(e)),this._socket.on("pong",e=>this._onPong(e)),this._socket.connect("/"),this._rejectAll("Initializing"),this._makePromise(-1)}_onConnect(){console.log("_onConnect()");const e={token:this._token};this._rooms&&(e.rooms=this._rooms);const t=this._send("authToken",e);this._promises[t]=this._promises[-1],delete this._promises[-1],this._callListener("connect",{})}_onReconnect(e){console.log("_onReconnect() attemptNumber="+e),this._callListener("reconnect",{attemptNumber:e,err:!1})}_onDisconnect(e){console.log("_onDisconnect() reason="+e),this._rejectAll(e),this._callListener("disconnect",{reason:e,err:!1})}_onConnectTimeout(e){console.log("_onConnectTimeout() timeout="+e),this._callListener("connectTimeout",{timeout:e,err:!1})}_onConnectError(e){console.log("_onConnectError() error="+e),this._rejectAll("Connect error"),this._callListener("connectError",{err:e})}_checkAndReject(e){return!e.err||(this._reject(e.id,e.err),!1)}_resolveOrReject(e){this._checkAndReject(e)&&this._resolve(e.id,e)}_onParticipants(e){console.log("_onParticipants()"),console.log(e),this._resolveOrReject(e),this._callListener("participants",e)}_onRooms(e){console.log("_onRooms()"),console.log(e),this._resolveOrReject(e),this._callListener("rooms",e)}_callListener(e,t){this._listener&&(t.event=e,this._listener(t.err,t))}_onJoined(e){console.log("_onJoined()"),console.log(e),this._resolveOrReject(e),this._callListener("joined",e)}_onLeft(e){console.log("_onLeft()"),console.log(e),this._resolveOrReject(e),this._callListener("left",e)}_onMessage(e){console.log("_onMessage()"),console.log(e),e.err=!1,this._callListener("message",e)}_onAuthResult(e){console.log("_onAuthResult()"),console.log(e),e.err?(this._id=void 0,this._rooms=void 0):(this._id=e.clientId,e.token&&(this._token=e.token)),this._checkAndReject(e)&&this._resolve(e.id,this),this._callListener("authResult",e)}_onReconnecting(e){console.log("_onReconnecting() attemptNumber="+e),this._callListener("reconnecting",{attemptNumber:e,err:!1})}_onReconnectError(e){console.log("_onReconnectError() error="+e),this._callListener("reconnectError",{err:e})}_onReconnectFailed(e){console.log("_onReconnectFailed() error="+e),this._callListener("reconnectFailed",{err:e})}_onPong(e){console.log("_onPong() latencyMs="+e),this._latency=e,this._callListener("pong",{latency:e,err:!1})}_resolve(e,t){const o=this._promises[e];return!!o&&(delete this._promises[e],o.resolve(t),!0)}_reject(e,t){const o=this._promises[e];return!!o&&(delete this._promises[e],o.reject(t),!0)}_rejectAll(e){Object.keys(this._promises).map(t=>this._reject(t,e))}join(e){if(this.disconnected())throw"Disconnected";if(!e)throw"Room name(s) required";"string"==typeof e&&(e=[e]);const t={rooms:e},o=this._send("rooms",t);return this._makePromise(o)}leave(e){if(this.disconnected())throw"Disconnected";const t={};"string"==typeof e&&(e=[e]),e&&(t.rooms=e);const o=this._send("leave",t);return this._makePromise(o)}participants(e){if(this.disconnected())throw"Disconnected";const t={};"string"==typeof e&&(e=[e]),e&&(t.rooms=e);const o=this._send("participants",t);return this._makePromise(o)}rooms(){if(this.disconnected())throw"Disconnected";const e=this._send("rooms",{});return this._makePromise(e)}_send(e,t){return this._messageId=this._messageId+1,t.id=this._messageId,this._socket.emit(e,t),t.id}send(e,t){if(this.disconnected())throw"Disconnected";if(void 0===e)throw"Message required";"string"==typeof t&&(t=[t]);const o={message:e};t&&(o.rooms=t),this._send("message",o)}id(){return this._id}token(e){let t=this._token;return e&&(this._token=e),t}latency(){if(this.disconnected())throw"Disconnected";return this._latency}disconnected(){return this._socket._disconnected}_makePromise(e){return new Promise((t,o)=>{const s={resolve:t,reject:o};this._promises[e]=s})}disconnect(){this._socket.disconnect()}setEventListener(e){if(!(e instanceof Function))throw"Function required";this._listener=e}}return t._created=!1,e.Messaging=t,e.createMessaging=async function(e){if("object"!=typeof e)throw"io() required";e.io||(e={io:e});const o=new t;return e.eventListener&&o.setEventListener(e.eventListener),await o.init(e)},e}({});